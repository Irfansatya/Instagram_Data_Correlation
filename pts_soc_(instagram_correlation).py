# -*- coding: utf-8 -*-
"""PTS SOC (Instagram Correlation).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PEXA9Hw0C30rqmSekhzwuDN15E3UfcA0
"""

# Commented out IPython magic to ensure Python compatibility.
# Import Library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib.pyplot as plt
plt.style.use('ggplot')
from matplotlib.pyplot import figure

# %matplotlib inline
matplotlib.rcParams['figure.figsize'] = (12,8) # Mengatur ukuran gambar grafik yang dihasilkan matplotlib

# Memasukkan & menampilkan data
instagram = pd.read_csv('/content/top_insta_influencers_data.csv')
display(instagram)

# Menampilkan 5 data pertama (default)
instagram.head()

nama_kolom = 'country'
baris_dengan_nan_country = instagram[instagram['country'].isnull()]
print(baris_dengan_nan_country)

nama_kolom = 'country'
instagram = instagram.dropna(subset=[nama_kolom])
print(instagram)

instagram.shape

# Mencari data yang hilang dalam kolom
for col in instagram.columns:
  pct_missing = np.mean(instagram[col].isnull())
  print('{} - {}%'.format(col, pct_missing))

# Menampilkan tipe data dari semua kolom
instagram.dtypes

# Mengganti tipe data kolom
instagram['influence_score'] = instagram['influence_score'].astype('float64')

instagram.dtypes

# Mengurutkan nilai terbesar ke terkecil dari kolom 'total_likes'
# (inplace=False) digunakan agar DataFrame tidak berubah permanen
# (ascending=False) agar nilai diurutkan dari terbesar ke terkecil

instagram.sort_values(by=['total_likes'], inplace=False, ascending=False)

# Menampilkan semua baris dalam data
pd.set_option('display.max_rows', None)
instagram

# Menghapus data dari kolom 'country' yang memiliki nilai sama
# Akan memunculkan output 'nama country' beserta 'id country' tersebut
instagram['country'].drop_duplicates().sort_values(inplace=True, ascending=False)
instagram

instagram.drop_duplicates()

instagram.shape

# Menggunakan matplotlib
# Menampilkan scatter plot dari kolom 'rank' dan 'influence_score'
plt.scatter(x=instagram['rank'], y=instagram['influence_score'])
plt.title('Rank & Influence Score')
plt.xlabel('Rank')
plt.ylabel('Influence Score')
plt.show()

# Menggunakan seaborn
# Menampilkan scatter plot dengan garis regresi yang menunjukkan kemiringan negatif pada output
sns.regplot(x='rank', y='influence_score', data=instagram, scatter_kws={"color":"red"}, line_kws={"color":"blue"})
plt.show()

# Menghitung korelasi pada DataFrame dengan method 'pearson'
# Method 'pearson' digunakan untuk mengukur korelasi linear
# jika nilai yang dihasilkan (-) maka itu menunjukkan korelasi negatif antara dua variabel, dan sebaliknya

instagram.corr(method='pearson')

# Menghitung korelasi pada DataFrame dengan metode 'kendall'
# Method 'kendall' digunakan untuk mengukur korelasi non-parametrik
# jika nilai yang dihasilkan (-) maka itu menunjukkan korelasi negatif antara dua variabel, dan sebaliknya

instagram.corr(method='kendall')

# Menghitung korelasi pada DataFrame dengan metode 'spearman'
# Method 'spearman' digunakan untuk mengukur korelasi non-parametrik
# jika nilai yang dihasilkan (-) maka itu menunjukkan korelasi negatif antara dua variabel, dan sebaliknya

instagram.corr(method='spearman')

# Menampilkan heatmap yang berisi matriks korelasi
correlation_matrix = instagram.corr(method='pearson')
sns.heatmap(correlation_matrix, annot=True)
plt.title('Correlation Matric for Numeric Features')
plt.xlabel('Instagram Features')
plt.ylabel('Instagram Features')
plt.show()

# Numerisasi kolom yang memiliki tipe data 'object'
instagram_numerized = instagram
for col_name in instagram_numerized.columns:
  if(instagram_numerized[col_name].dtype == 'object'):
    instagram_numerized[col_name] = instagram_numerized[col_name].astype('category') # Mengganti tipe data 'object' menjadi 'category'
    instagram_numerized[col_name] = instagram_numerized[col_name].cat.codes # Mengubah setiap value yang ada di tipe data 'category' menjadi kode numerik

instagram_numerized

# Menampilkan matriks korelasi dari semua kode numerik yang ada
correlation_matrix = instagram.corr(method='pearson')
sns.heatmap(correlation_matrix, annot=True)
plt.title('Correlation Matric for Numeric Features')
plt.xlabel('Instagram Features')
plt.ylabel('Instagram Features')
plt.show()

# Menampilkan korelasi dari DataFrame yang telah diperbarui sebelumnya, yaitu 'instagram_numerized'
instagram_numerized.corr()

# Menampilkan korelasi setiap kolom dalam format series
# Format ini berbentuk list korelasi yang dimiliki setiap kolom DataFrame 'instagram_numerized'
# Format ini lebih mudah untuk diinterpretasikan dan lebih mudah dilihat

correlation_mat = instagram_numerized.corr()
corr_pairs = correlation_mat.unstack()
corr_pairs

# Mengurutkan pasangan variabel dan nilai korelasi dari yang terendah (-0) hingga yang tertinggi (1)
sorted_pairs = corr_pairs.sort_values()
sorted_pairs

# Menampilkan pasangan variabel dan nilai korelasi yang nilainya lebih dari 0.5
high_corr = sorted_pairs[(sorted_pairs) > 0.5]
high_corr